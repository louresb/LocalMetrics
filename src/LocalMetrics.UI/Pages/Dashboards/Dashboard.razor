@page "/dashboard"
@using LocalMetrics.Web.Models
@using LocalMetrics.Web.Services
@inject MetricsService MetricsService

<h1 class="text-2xl font-bold mb-4">Metrics Dashboard</h1>

@if (_metrics is null)
{
    <p>Loading...</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="p-4 shadow rounded bg-white">
            <h2 class="font-semibold">CPU Usage</h2>
            <p class="text-xl">@string.Format("{0:F2}%", _metrics.CpuUsage)</p>
        </div>
        <div class="p-4 shadow rounded bg-white">
            <h2 class="font-semibold">RAM Usage</h2>
            <p class="text-xl">@string.Format("{0:F2}%", _metrics.RamUsage)</p>
        </div>
        <div class="p-4 shadow rounded bg-white">
            <h2 class="font-semibold">Disk Usage</h2>
            <p class="text-xl">@string.Format("{0:F2}%", _metrics.DiskUsage)</p>
        </div>
    </div>
}

@code {
    private SystemMetrics? _metrics;
    private PeriodicTimer? _timer;
    private readonly CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMetricsAsync();

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

        _ = Task.Run(async () =>
        {
            while (await _timer.WaitForNextTickAsync(_cts.Token))
            {
                await InvokeAsync(LoadMetricsAsync);
            }
        });
    }

    private async Task LoadMetricsAsync()
    {
        try
        {
            _metrics = await MetricsService.GetSystemMetricsAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading/decrypting metrics: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
        _timer?.Dispose();
    }
}
